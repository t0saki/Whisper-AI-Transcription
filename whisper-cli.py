import os
import argparse
import subprocess
import tempfile
import shutil


def main():
    # Command line argument parsing
    parser = argparse.ArgumentParser(
        description="Convert videos/audio to transcription")
    parser.add_argument(
        "input_folder", help="Folder containing media files to process")
    parser.add_argument("--language", "-l", default="English",
                        help="Language for transcription (default: English)")
    parser.add_argument("--subtitles", "-s", action="store_true",
                        help="Generate timestamped subtitles in SRT format")
    parser.add_argument("--formats", default=".mp4,.avi,.mkv,.mov,.wmv,.flv,.webm,.mp3,.wav,.ogg,.flac,.m4a",
                        help="Comma-separated list of file extensions to process (default: common video/audio formats)")
    parser.add_argument("--model", default="large-v3-turbo",
                        help="Whisper model to use (default: large-v3-turbo)")
    args = parser.parse_args()

    # Traverse folder for supported media files
    input_folder = args.input_folder
    supported_formats = args.formats.lower().split(",")
    media_files = [f for f in os.listdir(input_folder)
                   if any(f.lower().endswith(ext) for ext in supported_formats)]

    print(f"Found {len(media_files)} media files to process.")
    print(f"Using language: {args.language}")
    print(f"Using model: {args.model}")

    for i, media_file in enumerate(media_files):
        media_path = os.path.join(input_folder, media_file)
        base_name = os.path.splitext(media_file)[0]
        print(f"[{i+1}/{len(media_files)}] Processing {media_file}...")

        # Create temporary directory for whisper output
        with tempfile.TemporaryDirectory() as temp_output_dir:

            # For video files, extract audio first
            audio_path = media_path
            temp_wav_path = None

            if not any(media_file.lower().endswith(ext) for ext in ['.mp3', '.wav', '.ogg', '.flac', '.m4a']):
                print(f"  Extracting audio from video...")
                temp_wav_path = os.path.join(temp_output_dir, "temp_audio.wav")

                try:
                    subprocess.run([
                        'ffmpeg', '-i', media_path, '-vn', temp_wav_path,
                        '-y', '-loglevel', 'error'
                    ], check=True)
                    audio_path = temp_wav_path
                except subprocess.CalledProcessError as e:
                    print(f"  Error extracting audio from {media_file}: {e}")
                    continue

            # Process the audio with whisper
            print(f"  Transcribing audio...")

            try:
                # Use 'all' format if subtitles are requested, otherwise just 'txt'
                output_format = "all" if args.subtitles else "txt"

                whisper_cmd = [
                    'whisper', audio_path,
                    '--model', args.model,
                    '--language', args.language,
                    '--output_dir', temp_output_dir,
                    '--output_format', output_format
                ]

                # Run whisper command
                result = subprocess.run(
                    whisper_cmd,
                    check=True,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.PIPE,
                    text=True
                )

                # Move output files to destination
                audio_basename = os.path.basename(audio_path)
                base_output_name = os.path.splitext(audio_basename)[0]

                # Copy text file
                txt_temp_path = os.path.join(
                    temp_output_dir, f"{base_output_name}.txt")
                txt_dest_path = os.path.join(input_folder, f"{base_name}.txt")

                if os.path.exists(txt_temp_path):
                    shutil.copy2(txt_temp_path, txt_dest_path)
                    print(f"  Transcription saved to {txt_dest_path}")

                # Copy SRT file if needed
                if args.subtitles:
                    srt_temp_path = os.path.join(
                        temp_output_dir, f"{base_output_name}.srt")
                    srt_dest_path = os.path.join(
                        input_folder, f"{base_name}.srt")

                    if os.path.exists(srt_temp_path):
                        shutil.copy2(srt_temp_path, srt_dest_path)
                        print(f"  SRT subtitles saved to {srt_dest_path}")
                    else:
                        print(f"  WARNING: SRT file was not generated by whisper")

            except subprocess.CalledProcessError as e:
                print(f"  Error processing {media_file}:")
                print(f"  Command: {' '.join(whisper_cmd)}")
                print(f"  Error output: {e.stderr}")

                # Try again with txt format only if 'all' failed
                if args.subtitles and output_format == "all":
                    print(f"  Retrying with txt format only...")
                    try:
                        whisper_cmd = [
                            'whisper', audio_path,
                            '--model', args.model,
                            '--language', args.language,
                            '--output_dir', temp_output_dir,
                            '--output_format', 'txt'
                        ]

                        subprocess.run(whisper_cmd, check=True)

                        # Copy text file
                        txt_temp_path = os.path.join(
                            temp_output_dir, f"{base_output_name}.txt")
                        txt_dest_path = os.path.join(
                            input_folder, f"{base_name}.txt")

                        if os.path.exists(txt_temp_path):
                            shutil.copy2(txt_temp_path, txt_dest_path)
                            print(f"  Transcription saved to {txt_dest_path}")

                    except subprocess.CalledProcessError as e2:
                        print(
                            f"  Failed to process file even with txt format only: {e2}")
            except Exception as e:
                print(f"  Unexpected error processing {media_file}: {e}")

    print("All processing complete.")


if __name__ == "__main__":
    main()
